library(ggplot2)
library(tidyr)
library(lubridate)
# Set Working Directory
setwd(
"C:/Users/KFake/Dropbox/Kim Fake/Research/Small Mammal and Tick Project"
)
# Read in Data
#Animal Pick Up Data June 2017 through September 2019.csv
data <- read.csv (
'./Data/2019 Yabsley Lab Results.csv',
stringsAsFactors = FALSE,
fileEncoding = 'UTF-8-BOM'
)
#Fix data types
data$Date <- as.Date(
data$Date,
format= "%m/%d/%Y"
)
#get rid of excess rows
data <- data[1:44,]
# Look at Sites
unique(data$Site)
# Look at Species of ticks
unique(data$Tick.Species)
# Look at life stages
unique(data$Life.Stage)
# Look at Species of ticks
unique(data$Small.Mammal.Species)
#clean data
data$Life.Stage[data$Life.Stage == "Nymph"] <- "Nymphs"
data$Life.Stage[data$Life.Stage == "Larva"] <- "Larvae"
data$Tick.Species[data$Tick.Species == "Ixodes scapularis "] <- "Ixodes scapularis"
data$Tick.Species[data$Tick.Species == "Dermacentor variabilis "] <- "Dermacentor variabilis"
# Look at Species of ticks
unique(data$Tick.Species)
# Look at Species of ticks
unique(data$Small.Mammal.Species)
# Look at life stages
unique(data$Life.Stage)
#filter to needed columns
data1 <- data %>%
select ("Site","Tick.Species", "Life.Stage", "X..of.Ticks")
#make table of tick species and lifestage numbers by site
ID_summary <- data1 %>%
group_by(Site, Tick.Species, Life.Stage) %>%
summarise(Qty = sum(X..of.Ticks))
ID_summary
# To Clear working environment
rm(list=ls())
graphics.off()
# Load libraries
library(dplyr)
library(ggplot2)
library(lme4)
# Set Working Directory
setwd(
"C:/Users/Kim Fake/Dropbox/Kim Fake/Research/Small Mammal and Tick Project"
)
#soucre data from prep script
source("./Scripts/Tick Analysis/prep_data_for_analysis.R")
#scale variables
data$Native.Veg.Proportion <- scale(data$Native.Veg.Proportion)
data$Native.Veg.Proportion <- scale(data$Litter.Proportion)
data$Native.Veg.Proportion <- scale(data$Carnivore.Proportion)
data$tree <- scale(data$tree)
data$Animal_Weight <- scale(data$Animal_Weight)
View(data)
# Set Working Directory
setwd(
"C:/Users/KFake/Dropbox/Kim Fake/Research/Tick Dragging/Tick-Dragging-Surveys"
)
# Set Working Directory
setwd(
"C:/Users/kfake/Dropbox/Kim Fake/R Resources/Statistical Analyses Examples/Linear-Regression-Example"
)
##################################################################
# The purpose of this R script is to demonstrate a T-test
# statistical analysis. This was made mostly for my own reference and a way to
# practice these functions so it is far from perfect or comprehensive,
# but I will share it for others who may find it helpful.
#
# Script by: Kim Fake
#
#
###################################################################
# To Clear working environment
rm(list=ls())
graphics.off()
# Load libraries
library(dplyr) # pretty much always load for filtering and manipulating data
library(Rmisc) # helpful function (summarySE) for summarizing data
library(ggplot2)
library(lubridate)
#load data
data <- read.csv (
'./Biology 101 Data CLEAN.csv',
stringsAsFactors = FALSE,
fileEncoding = 'UTF-8-BOM'
)
model <- lm(
Percent_Grade ~ Classes_Attended + Class + Age,
data=data
)
Summary(model)
data <- read.csv (
'C:/Users/KFake/Dropbox/Kim Fake/R Resources/Plotting Examples/visualizing-data-with-ggplot2-examples/Biology 101 Data CLEAN.csv',
stringsAsFactors = FALSE,
fileEncoding = 'UTF-8-BOM'
)
##################################################################
# The purpose of this R script is to demonstrate a T-test
# statistical analysis. This was made mostly for my own reference and a way to
# practice these functions so it is far from perfect or comprehensive,
# but I will share it for others who may find it helpful.
#
# Script by: Kim Fake
#
#
###################################################################
# To Clear working environment
rm(list=ls())
graphics.off()
# Load libraries
library(dplyr) # pretty much always load for filtering and manipulating data
library(Rmisc) # helpful function (summarySE) for summarizing data
library(ggplot2)
library(lubridate)
#load data
data <- read.csv (
'./Biology 101 Data CLEAN.csv',
stringsAsFactors = FALSE,
fileEncoding = 'UTF-8-BOM'
)
# separate dates into separate month, day, and year columns.
# note that I find this useful for filtering and
# subsetting/filtering data for many purposes
data <- data %>%
dplyr::mutate(Year = lubridate::year(B_Day),
Month = lubridate::month(B_Day),
Day = lubridate::day(B_Day))
data <- data %>%
mutate(Age = 2022-Year)
# load a helpful package for manipulating dates
library(lubridate)
# separate dates into separate month, day, and year columns.
# note that I find this useful for filtering and
# subsetting/filtering data for many purposes
data <- data %>%
dplyr::mutate(Year = lubridate::year(B_Day),
Month = lubridate::month(B_Day),
Day = lubridate::day(B_Day))
data <- data %>%
mutate(Age = 2022-Year)
# to change a data type to date use...
data$B_Day <- as.Date(data$B_Day,
format= "%m/%d/%Y"
)
# load a helpful package for manipulating dates
library(lubridate)
# separate dates into separate month, day, and year columns.
# note that I find this useful for filtering and
# subsetting/filtering data for many purposes
data <- data %>%
dplyr::mutate(Year = lubridate::year(B_Day),
Month = lubridate::month(B_Day),
Day = lubridate::day(B_Day))
data <- data %>%
mutate(Age = 2022-Year)
model <- lm(
Percent_Grade ~ Classes_Attended + Age,
data=data
)
Summary(model)
library(lme4)
#linear regression model
model <- lm(
Percent_Grade ~ Classes_Attended + Age,
data=data
)
Summary(model)
##################################################################
# The purpose of this R script is to demonstrate a T-test
# statistical analysis. This was made mostly for my own reference and a way to
# practice these functions so it is far from perfect or comprehensive,
# but I will share it for others who may find it helpful.
#
# Script by: Kim Fake
#
#
###################################################################
# To Clear working environment
rm(list=ls())
graphics.off()
# Load libraries
library(dplyr) # pretty much always load for filtering and manipulating data
library(Rmisc) # helpful function (summarySE) for summarizing data
library(ggplot2)
library(lubridate)
#library(lme4)
#load data
data <- read.csv (
'./Biology 101 Data CLEAN.csv',
stringsAsFactors = FALSE,
fileEncoding = 'UTF-8-BOM'
)
# to change a data type to date use...
data$B_Day <- as.Date(data$B_Day,
format= "%m/%d/%Y"
)
# separate dates into separate month, day, and year columns.
# note that I find this useful for filtering and
# subsetting/filtering data for many purposes
data <- data %>%
dplyr::mutate(Year = lubridate::year(B_Day),
Month = lubridate::month(B_Day),
Day = lubridate::day(B_Day))
data <- data %>%
mutate(Age = 2022-Year)
#linear regression model
model <- lm(
Percent_Grade ~ Classes_Attended + Age,
data=data
)
summary(model)
##################################################################
# The purpose of this R script is to demonstrate a T-test
# statistical analysis. This was made mostly for my own reference and a way to
# practice these functions so it is far from perfect or comprehensive,
# but I will share it for others who may find it helpful.
#
# Script by: Kim Fake
#
#
###################################################################
# To Clear working environment
rm(list=ls())
graphics.off()
##################################################################
# The purpose of this R script is to demonstrate a T-test
# statistical analysis. This was made mostly for my own reference and a way to
# practice these functions so it is far from perfect or comprehensive,
# but I will share it for others who may find it helpful.
#
# Script by: Kim Fake
#
#
###################################################################
# To Clear working environment
rm(list=ls())
graphics.off()
# Load libraries
library(dplyr) # pretty much always load for filtering and manipulating data
library(Rmisc) # helpful function (summarySE) for summarizing data
library(ggplot2)
library(lubridate)
#library(lme4)
#load data
data <- read.csv (
'./Biology 101 Data CLEAN.csv',
stringsAsFactors = FALSE,
fileEncoding = 'UTF-8-BOM'
)
# to change a data type to date use...
data$B_Day <- as.Date(data$B_Day,
format= "%m/%d/%Y"
)
# separate dates into separate month, day, and year columns.
# note that I find this useful for filtering and
# subsetting/filtering data for many purposes
data <- data %>%
dplyr::mutate(Year = lubridate::year(B_Day),
Month = lubridate::month(B_Day),
Day = lubridate::day(B_Day))
data <- data %>%
mutate(Age = 2022-Year)
#linear regression model
model <- lm(
Percent_Grade ~ Classes_Attended + Age,
data=data
)
summary(model)
View(data)
model <- lm(
Percent_Grade ~ Classes_Attended + Age + 1|Class,
data=data
)
summary(model)
model <- lmer(
Percent_Grade ~ Classes_Attended + Age + (1|Class),
data=data
)
summary(model)
#load package
library(lme4)
# Fit a generalized linear mixed-effects models
# with the added random effects
model <- lmer(
Percent_Grade ~ Classes_Attended + Age + (1|Class),
data=data
)
summary(model)
model <- lm(
Percent_Grade ~ Classes_Attended,
data=data
)
summary(model)
##################################################################
# The purpose of this R script is to demonstrate a linear regression
# statistical analysis. This was made mostly for my own reference and a way to
# practice these functions so it is far from perfect or comprehensive,
# but I will share it for others who may find it helpful.
#
# Script by: Kim Fake
#
#
###################################################################
# To Clear working environment
rm(list=ls())
graphics.off()
# Load libraries
library(dplyr) # pretty much always load for filtering and manipulating data
library(lubridate)
#load data
data <- read.csv (
'./Biology 101 Data CLEAN.csv',
stringsAsFactors = FALSE,
fileEncoding = 'UTF-8-BOM'
)
# before conducting a linear regression it is
# important to center and scale your numeric variables
data$Classes_Attended <- scale(data$Classes_Attended)
data$Percent_Grade <- scale(data$Percent_Grade)
# as you can see, this data is on 3 biology classes
# we want to use a linear regression to determine if the grades (%)
# related to the number of classes student attend during the semester
# linear regression model
# examining the relationship between percent grades
# and the number of classes attended in a semester
model <- lm(
Percent_Grade ~ Classes_Attended,
data=data
)
summary(model)
# we must also scale age
data$Age <- scale(data$Age)
# linear regression model
# examining the relationship between percent grades
# and the number of classes attended in a semester
# with Age included as a control
model <- lm(
Percent_Grade ~ Classes_Attended + Age,
data=data
)
summary(model)
##################################################################
# The purpose of this R script is to demonstrate a linear regression
# statistical analysis. This was made mostly for my own reference and a way to
# practice these functions so it is far from perfect or comprehensive,
# but I will share it for others who may find it helpful.
#
# Script by: Kim Fake
#
#
###################################################################
# To Clear working environment
rm(list=ls())
graphics.off()
# Load libraries
library(dplyr) # pretty much always load for filtering and manipulating data
library(lubridate)
#load data
data <- read.csv (
'./Biology 101 Data CLEAN.csv',
stringsAsFactors = FALSE,
fileEncoding = 'UTF-8-BOM'
)
# before conducting a linear regression it is
# important to center and scale your numeric variables
data$Classes_Attended <- scale(data$Classes_Attended)
data$Percent_Grade <- scale(data$Percent_Grade)
# as you can see, this data is on 3 biology classes
# we want to use a linear regression to determine if the grades (%)
# related to the number of classes student attend during the semester
# linear regression model
# examining the relationship between percent grades
# and the number of classes attended in a semester
model <- lm(
Percent_Grade ~ Classes_Attended,
data=data
)
summary(model)
# the coefficient in the model for classes attended is positive and significant
# this indicates that students that attend more classes tend to have higher grades
# However, we hypothesize Age might have an effect
# on the study habitats and grades of students
# and want to include it in our model to control for
# age differences among students
#first we must calculate the age of students based on their birthdates provided
# change a data type to date
data$B_Day <- as.Date(data$B_Day,
format= "%m/%d/%Y"
)
# create a year of birth column
data <- data %>%
dplyr::mutate(Year = lubridate::year(B_Day))
# make a new column with age made based on birth year
data <- data %>%
mutate(Age = 2022-Year)
# we must also scale age
data$Age <- scale(data$Age)
# linear regression model
# examining the relationship between percent grades
# and the number of classes attended in a semester
# with Age included as a control
model <- lm(
Percent_Grade ~ Classes_Attended + Age,
data=data
)
summary(model)
#load package
library(lme4)
# Fit a generalized linear mixed-effects models
# with the added random effects
model <- lmer(
Percent_Grade ~ Classes_Attended + Age + (1|Class),
data=data
)
summary(model)
# set class as a factor
data$Class <- as.factor(data$Class)
# Fit a generalized linear mixed-effects models
# with the added random effects
model <- lmer(
Percent_Grade ~ Classes_Attended + Age + (1|Class),
data=data
)
summary(model)
##################################################################
# The purpose of this R script is to demonstrate a linear regression
# statistical analysis. This was made mostly for my own reference and a way to
# practice these functions so it is far from perfect or comprehensive,
# but I will share it for others who may find it helpful.
#
# Script by: Kim Fake
#
#
###################################################################
# To Clear working environment
rm(list=ls())
graphics.off()
# Load libraries
library(dplyr) # pretty much always load for filtering and manipulating data
library(lubridate)
#load data
data <- read.csv (
'./Biology 101 Data CLEAN.csv',
stringsAsFactors = FALSE,
fileEncoding = 'UTF-8-BOM'
)
# In regression, it is often recommended to center and scale continuous variables
# so that the predictors have a mean of 0 and a standard deviation of 1
data$Classes_Attended <- scale(data$Classes_Attended)
#data$Percent_Grade <- scale(data$Percent_Grade)
# as you can see, this data is on 3 biology classes
# we want to use a linear regression to determine if the grades (%)
# related to the number of classes student attend during the semester
# linear regression model
# examining the relationship between percent grades
# and the number of classes attended in a semester
model <- lm(
Percent_Grade ~ Classes_Attended,
data=data
)
summary(model)
##################################################################
# The purpose of this R script is to demonstrate a linear regression
# statistical analysis. This was made mostly for my own reference and a way to
# practice these functions so it is far from perfect or comprehensive,
# but I will share it for others who may find it helpful.
#
# Script by: Kim Fake
#
#
###################################################################
# To Clear working environment
rm(list=ls())
graphics.off()
# Load libraries
library(dplyr) # pretty much always load for filtering and manipulating data
library(lubridate)
#load data
data <- read.csv (
'./Biology 101 Data CLEAN.csv',
stringsAsFactors = FALSE,
fileEncoding = 'UTF-8-BOM'
)
# In regression, it is often recommended to center and scale continuous variables
# so that the predictors have a mean of 0 and a standard deviation of 1
data$Classes_Attended <- scale(data$Classes_Attended)
data$Percent_Grade <- scale(data$Percent_Grade)
# as you can see, this data is on 3 biology classes
# we want to use a linear regression to determine if the grades (%)
# related to the number of classes student attend during the semester
# linear regression model
# examining the relationship between percent grades
# and the number of classes attended in a semester
model <- lm(
Percent_Grade ~ Classes_Attended,
data=data
)
summary(model)
